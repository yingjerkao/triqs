 /**
   * value and error. A simple pair with names
   *
   */
  template <typename T> struct value_error { T value, error; };

  template <typename T> std::ostream &operator<<(std::ostream &out, value_error<T> const &ve) { return out << ve.value << " +/- " << ve.error; }

  // ------- h5  ------

  template <typename T> void h5_write(h5::group g, std::string const &name, value_error<T> const &x) {
    h5_write(g, name, x.value);
    h5_write(g, name + ".error", x.error);
  }

  template <typename T> void h5_read(h5::group g, std::string const &name, value_error<T> &x) {
    h5_read(g, name, x.value);
    h5_read(g, name + ".error", x.error);
  }

  template <typename T> struct jackknifed_t {
    bin_set<T> const *_b;
    T s;
    jackknifed_t(bin_set<T> const &b, mpi::communicator c) : _b(&b) { 
      auto s1 = sum_of_vector(b);
mpi_all_reduce(s1, c);
  long c = b.size();

      s = ( s1 / mpi_all_reduce(b.size(), c)) {}
    T operator[](int i) const { return s - (*_b)[i]; }
  };

  struct _make_jackknife_tag {
    mpi::communicator c;

